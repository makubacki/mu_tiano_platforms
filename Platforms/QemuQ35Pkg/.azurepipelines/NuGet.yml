## @file
# Azure Pipeline build file for publishing a NuGet package.
#
# Platform: QemuQ35
# OS: Ubuntu
# Toolchain: GCC
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: publish_q35_binaries
  displayName: Publish QEMU Q35 Binaries
  type: boolean
  default: true
- name: publish_q35sbsa_binaries
  displayName: Publish QEMU Q35 SBSA Binaries
  type: boolean
  default: true

resources:
  repositories:
    - repository: mu_devops
      type: github
      endpoint: makubacki
      name: makubacki/mu_devops
      ref: test_nuget_publishing

name: $(Date:yyyyMMdd)$(Rev:.r) Mu Tiano Platforms NuGet Release

jobs:
  - job: Publish

    strategy:
      matrix:
        ${{ if eq(parameters.publish_q35_binaries, true) }}:
          QEMU Q35 Debug:
            artifact_name: Build Logs QemuQ35_DEBUG
            nuget_package_config_file: >-
              https://raw.githubusercontent.com/makubacki/mu_tiano_platforms/test_nuget_publishing/Platforms/QemuQ35Pkg/NugetPublishing/DebugConfig.yaml
            gcc_folder_name: Linux-x86
            gcc_pipeline_name: Mu Tiano Platforms Q35 Plat CI GCC5
            vs_folder_name: Windows-x86
            vs_pipeline_name: Mu Tiano Platforms Q35 Plat CI VS

          QEMU Q35 Release:
            artifact_name: Build Logs QemuQ35_RELEASE
            nuget_package_config_file: >-
              https://raw.githubusercontent.com/makubacki/mu_tiano_platforms/test_nuget_publishing/Platforms/QemuQ35Pkg/NugetPublishing/ReleaseConfig.yaml
            gcc_folder_name: Linux-x86
            gcc_pipeline_name: Mu Tiano Platforms Q35 Plat CI GCC5
            vs_folder_name: Windows-x86
            vs_pipeline_name: Mu Tiano Platforms Q35 Plat CI VS

        ${{ if eq(parameters.publish_q35sbsa_binaries, true) }}:
          QEMU Q35 SBSA Debug:
            artifact_name: Build Logs QemuSbsa_DEBUG
            nuget_package_config_file: >-
              https://raw.githubusercontent.com/makubacki/mu_tiano_platforms/test_nuget_publishing/Platforms/QemuSbsaPkg/NugetPublishing/DebugConfig.yaml
            gcc_folder_name: Linux-x86
            gcc_pipeline_name: Mu Tiano Platforms SBSA Plat CI GCC5
            vs_folder_name: ''
            vs_pipeline_name: ''

          QEMU Q35 SBSA Release:
            artifact_name: Build Logs QemuSbsa_RELEASE
            nuget_package_config_file: >-
              https://raw.githubusercontent.com/makubacki/mu_tiano_platforms/test_nuget_publishing/Platforms/QemuSbsaPkg/NugetPublishing/ReleaseConfig.yaml
            gcc_folder_name: Linux-x86
            gcc_pipeline_name: Mu Tiano Platforms SBSA Plat CI GCC5
            vs_folder_name: ''
            vs_pipeline_name: ''

    workspace:
      clean: all

    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: none

    - task: UsePythonVersion@0
      displayName: Use Python 3.10.x
      inputs:
        versionSpec: 3.10.x
        architecture: x64

    - script: python -m pip install edk2-pytool-extensions==0.*
      displayName: Install edk2-pytool-extensions

    - script: |
        curl -s https://api.github.com/repos/makubacki/mu_tiano_platforms/releases/latest --output release_response.json
        rawRepoVer=$(cat release_response.json | jq -r '.name')
        id=$(cat release_response.json | jq -r '.id')
        prefixToRemove="v"
        repoVer=$(echo "${rawRepoVer/#$prefixToRemove}")
        echo "##vso[task.setvariable variable=raw_repo_version;]${rawRepoVer}"
        echo "##vso[task.setvariable variable=repo_version;]${repoVer}"
        echo "##vso[task.setvariable variable=repo_release_id;]${id}"
      displayName: Get Current Repo Release ID & Version

    - script: |
        read type tagSha < <(echo $(curl -s "https://api.github.com/repos/makubacki/mu_tiano_platforms/git/ref/tags/$RAW_REPO_VERSION" | jq -r '.object.type,.object.sha'))
        if [ $type == "commit" ]; then
          echo "##vso[task.setvariable variable=repo_release_commit_sha;]${tagSha}"
        else
          finalTagSha=$(curl -s "https://api.github.com/repos/makubacki/mu_tiano_platforms/git/tags/$tagSha" | jq '.object.sha')
          echo "##vso[task.setvariable variable=repo_release_commit_sha;]${finalTagSha}"
        fi
      displayName: Get Current Release Commit Hash

    - script: |
        curl https://raw.githubusercontent.com/microsoft/mu_tiano_platforms/main/License.txt --output $BUILD_ARTIFACTSTAGINGDIRECTORY/License.txt
      displayName: Download NuGet Package License File

    - script: |
        curl https://raw.githubusercontent.com/makubacki/mu_tiano_platforms/test_nuget_publishing/Platforms/QemuQ35Pkg/.azurepipelines/nuget_publishing_with_repo_support.py --output $(Build.SourcesDirectory)/Platforms/QemuQ35Pkg/.azurepipelines/nuget_publishing_with_repo_support.py --create-dirs
      displayName: 'TEMP: Download NuGet Publish Python Script'

    - script: |
        curl $NUGET_PACKAGE_CONFIG_FILE --output $BUILD_ARTIFACTSTAGINGDIRECTORY/NugetConfigFile.txt
      displayName: Download NuGet Package Config File

    - script: |
        nugetPackageName=$(grep '^name:' $BUILD_ARTIFACTSTAGINGDIRECTORY/NugetConfigFile.txt | cut -d: -f2 | xargs)
        echo "##vso[task.setvariable variable=nuget_package_name;]${nugetPackageName}"
      displayName: Get NuGet Package Name

    - task: DownloadBuildArtifacts@0
      name: DownloadGccBuildArtifacts
      displayName: Download GCC Build Artifacts
      inputs:
        buildType: 'specific'
        project: $(System.TeamProject)
        pipeline: $(gcc_pipeline_name)
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: $(artifact_name)
        downloadPath: '$(Build.ArtifactStagingDirectory)/$(gcc_folder_name)'
      condition: and(ne(variables.gcc_folder_name, ''), ne(variables.gcc_pipeline_name, ''))

    - task: CopyFiles@2
      displayName: Copy GCC Binaries
      inputs:
        targetFolder: '$(Build.StagingDirectory)/Nuget/package_contents/$(gcc_folder_name)'
        sourceFolder: '$(Build.ArtifactStagingDirectory)/$(gcc_folder_name)'
        contents: '**/*.fd'
        flattenFolders: true
      condition: and(ne(variables.gcc_folder_name, ''), ne(variables.gcc_pipeline_name, ''))

    - task: DownloadBuildArtifacts@0
      name: DownloadVisualStudioBuildArtifacts
      displayName: Download Visual Studio Build Artifacts
      inputs:
        buildType: 'specific'
        project: $(System.TeamProject)
        pipeline: $(vs_pipeline_name)
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: $(artifact_name)
        downloadPath: '$(Build.ArtifactStagingDirectory)/$(vs_folder_name)'
      condition: and(ne(variables.vs_folder_name, ''), ne(variables.vs_pipeline_name, ''))

    - task: CopyFiles@2
      displayName: Copy Visual Studio Binaries
      inputs:
        targetFolder: '$(Build.StagingDirectory)/Nuget/package_contents/$(vs_folder_name)'
        sourceFolder: '$(Build.ArtifactStagingDirectory)/$(vs_folder_name)'
        contents: '**/*.fd'
        flattenFolders: true
      condition: and(ne(variables.vs_folder_name, ''), ne(variables.vs_pipeline_name, ''))

    - task: Bash@3
      name: PackAndPublishNugetPackage
      displayName: Pack and Push Nuget Package
      env:
        LICENSE_FILE_PATH: $(Build.ArtifactStagingDirectory)/License.txt
        NUGET_KEY: $(NUGET_KEY)
        NUGET_PACKAGE_CONFIG_FILE_PATH: $(Build.ArtifactStagingDirectory)/NugetConfigFile.txt
        NUGET_PACKAGE_VERSION: $(repo_version)
        RELEASE_COMMIT_SHA: $(repo_release_commit_sha)
      inputs:
        targetType: 'inline'
        script: |
          apiKey=$NUGET_KEY
          configFilePath=$NUGET_PACKAGE_CONFIG_FILE_PATH
          customLicensePath=$LICENSE_FILE_PATH
          inputFolderPath="${BUILD_STAGINGDIRECTORY}/Nuget/package_contents"
          outputLogPath="${BUILD_STAGINGDIRECTORY}/Nuget/NugetPackagingLog.txt"
          packageVersion=$NUGET_PACKAGE_VERSION
          releaseCommitSha=$RELEASE_COMMIT_SHA
          python3 ${BUILD_SOURCESDIRECTORY}/Platforms/QemuQ35Pkg/.azurepipelines/nuget_publishing_with_repo_support.py --Operation PackAndPush --OutputLog "$outputLogPath" --ConfigFilePath "$configFilePath" --InputFolderPath "$inputFolderPath" --Version "$packageVersion" --ApiKey "$apiKey" --CustomLicensePath "$customLicensePath" --RepositoryCommit "$releaseCommitSha"

    - task: Bash@3
      name: ZipAndPublishReleaseAsset
      displayName: Add Zip File Release Asset
      env:
        GH_TOKEN: $(NUGET_KEY)
        INPUT_FOLDER_PATH: "$(Build.StagingDirectory)/Nuget/package_contents"
        NUGET_PACKAGE_NAME: $(nuget_package_name)
        NUGET_PACKAGE_VERSION: $(repo_version)
        REPO_RELEASE_ID: $(repo_release_id)
      inputs:
        targetType: 'inline'
        script: |
          inputFolderPath="${BUILD_STAGINGDIRECTORY}/Nuget/package_contents"
          zip -r $NUGET_PACKAGE_NAME-$NUGET_PACKAGE_VERSION.zip "${inputFolderPath}"
          pwd
          ls -l
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            "https://uploads.github.com/repos/makubacki/mu_tiano_platforms/releases/${REPO_RELEASE_ID}/assets?name=${NUGET_PACKAGE_NAME}-${NUGET_PACKAGE_VERSION}.zip" \
            --data-binary "@${NUGET_PACKAGE_NAME}-${NUGET_PACKAGE_VERSION}.zip"
