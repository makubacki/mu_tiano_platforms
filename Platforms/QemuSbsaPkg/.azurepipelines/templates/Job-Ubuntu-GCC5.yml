## @file
# Azure Pipeline build file for building a platform.
#
# Platform: Qemu SBSA
# OS: Ubuntu
# Toolchain: GCC
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

jobs:
  - job: SBSA_GCC
    displayName: QemuSbsaPkg GCC

    variables:
      - group: architectures-arm64
      - group: tool-chain-ubuntu-gcc
      - name: package
        value: QemuSbsaPkg
      - name: should_run
        value: true
      - name: run_flags
        value: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE"

    # Use matrix to speed up the build process
    strategy:
        matrix:

          QemuSbsa_DEBUG:
            Build.File: "Platforms/$(package)/PlatformBuild.py"
            Build.Arch: $(arch_list)
            Build.Flags: ""
            Build.Target: "DEBUG"
            Run.Flags: $(run_flags)
            Run: $(should_run)

          QemuSbsa_RELEASE:
            Build.File: "Platforms/$(package)/PlatformBuild.py"
            Build.Arch: $(arch_list)
            Build.Flags: ""
            Build.Target: "RELEASE"
            Run.Flags: $(run_flags)
            Run: $(should_run)

          # NOOPT build too big to fit in FVs
          #QemuSbsa_NOOPT:
          #  Build.File: "Platforms/$(package)/PlatformBuild.py"
          #  Build.Arch: $(arch_list)
          #  Build.Flags: ""
          #  Build.Target: "NOOPT"
          #  Run.Flags: $(run_flags)
          #  Run: $(should_run)
    workspace:
      clean: all

    pool:
      vmImage: $(vm_image)

    container: ghcr.io/tianocore/containers/fedora-35-test:5b8a008

    steps:
    - script: echo "##vso[task.prependpath]/home/vsts_azpcontainer/.local/bin"
      displayName: Add User Local Bin to Path
    - template: Steps/BuildPlatform.yml@mu_devops
      parameters:
        tool_chain_tag: $(tool_chain_tag)
        build_pkg: $(package)
        build_target: $(Build.Target)
        build_arch: $(Build.Arch)
        build_file: $(Build.File)
        build_flags: $(Build.Flags)
        run_flags: $(Run.Flags)
        install_tools: false
        extra_install_step:
          - script: sudo dnf --assumeyes install openssl-devel
            displayName: Install openssl
            condition: and(gt(variables.pkg_count, 0), succeeded())
        artifacts_identifier: '$(package) $(tool_chain_tag) $(Build.Target)'
        artifacts_binary: |
          **/QEMU_EFI.fd
          **/SECURE_FLASH0.fd
