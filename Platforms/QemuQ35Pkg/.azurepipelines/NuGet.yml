## @file
# Azure Pipeline build file for publishing a NuGet package.
#
# Platform: QemuQ35
# OS: Ubuntu
# Toolchain: GCC
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: publish_q35_binaries
  displayName: Publish QEMU Q35 Binaries
  type: boolean
  default: true
- name: publish_q35sbsa_binaries
  displayName: Publish QEMU Q35 SBSA Binaries
  type: boolean
  default: true

resources:
  repositories:
    - repository: mu_devops
      type: github
      endpoint: makubacki
      name: makubacki/mu_devops
      ref: test_nuget_publishing

name: $(Date:yyyyMMdd)$(Rev:.r) Mu Tiano Platforms NuGet Release

jobs:
  - job: Publish

    strategy:
      matrix:
        ${{ if eq(parameters.publish_q35_binaries, true) }}:
          QEMU Q35 Debug:
            artifact_name: Build Logs QemuQ35_DEBUG
            nuget_package_config_file: >-
              https://raw.githubusercontent.com/makubacki/mu_tiano_platforms/test_nuget_publishing/Platforms/QemuQ35Pkg/NugetPublishing/DebugConfig.yaml
            gcc_folder_name: Linux-x86
            gcc_pipeline_name: Mu Tiano Platforms Q35 Plat CI GCC5
            vs_folder_name: Windows-x86
            vs_pipeline_name: Mu Tiano Platforms Q35 Plat CI VS

          QEMU Q35 Release:
            artifact_name: Build Logs QemuQ35_RELEASE
            nuget_package_config_file: >-
              https://raw.githubusercontent.com/makubacki/mu_tiano_platforms/test_nuget_publishing/Platforms/QemuQ35Pkg/NugetPublishing/ReleaseConfig.yaml
            gcc_folder_name: Linux-x86
            gcc_pipeline_name: Mu Tiano Platforms Q35 Plat CI GCC5
            vs_folder_name: Windows-x86
            vs_pipeline_name: Mu Tiano Platforms Q35 Plat CI VS

        ${{ if eq(parameters.publish_q35sbsa_binaries, true) }}:
          QEMU Q35 SBSA Debug:
            artifact_name: Build Logs QemuSbsa_DEBUG
            gcc_folder_name: Linux-x86
            gcc_pipeline_name: Mu Tiano Platforms SBSA Plat CI GCC5
            vs_folder_name: ''
            vs_pipeline_name: ''

          QEMU Q35 SBSA Release:
            artifact_name: Build Logs QemuSbsa_RELEASE
            gcc_folder_name: Linux-x86
            gcc_pipeline_name: Mu Tiano Platforms SBSA Plat CI GCC5
            vs_folder_name: ''
            vs_pipeline_name: ''

    workspace:
      clean: all

    pool:
      vmImage: ubuntu-latest

    steps:
    - checkout: none

    - task: UsePythonVersion@0
      displayName: Use Python 3.10.x
      inputs:
        versionSpec: 3.10.x
        architecture: x64

    - script: python -m pip install edk2-pytool-extensions==0.*
      displayName: Install edk2-pytool-extensions

    - script: |
        rawRepoVer=$(curl -s https://api.github.com/repos/microsoft/mu_devops/releases | jq -r '.[0].name')
        prefixToRemove="v"
        repoVer=$(echo "${rawRepoVer/#$prefixToRemove}")
        echo "##vso[task.setvariable variable=repo_version;]${repoVer}"
      displayName: Get Current Repo Release Version

    - script: |
        curl https://raw.githubusercontent.com/microsoft/mu_tiano_platforms/main/License.txt --output $BUILD_ARTIFACTSTAGINGDIRECTORY/License.txt
      displayName: Download NuGet Package License File

    - script: |
        curl $NUGET_PACKAGE_CONFIG_FILE --output $BUILD_ARTIFACTSTAGINGDIRECTORY/NugetConfigFile.txt
      displayName: Download NuGet Package Config File

    - task: DownloadBuildArtifacts@0
      name: DownloadGccBuildArtifacts
      displayName: Download GCC Build Artifacts
      inputs:
        buildType: 'specific'
        project: $(System.TeamProject)
        pipeline: $(gcc_pipeline_name)
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: $(artifact_name)
        downloadPath: '$(Build.ArtifactStagingDirectory)/$(gcc_folder_name)'

    - task: DownloadBuildArtifacts@0
      name: DownloadVisualStudioBuildArtifacts
      displayName: Download Visual Studio Build Artifacts
      inputs:
        buildType: 'specific'
        project: $(System.TeamProject)
        pipeline: $(vs_pipeline_name)
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: $(artifact_name)
        downloadPath: '$(Build.ArtifactStagingDirectory)/$(vs_folder_name)'

    - task: CopyFiles@2
      displayName: "Copy GCC Binaries"
      inputs:
        targetFolder: '$(Build.StagingDirectory)/Nuget/package_contents/$(gcc_folder_name)'
        sourceFolder: '$(Build.ArtifactStagingDirectory)/$(gcc_folder_name)'
        contents: '**'
        flattenFolders: true

    - task: CopyFiles@2
      displayName: "Copy Visual Studio Binaries"
      inputs:
        targetFolder: '$(Build.StagingDirectory)/Nuget/package_contents/$(vs_folder_name)'
        sourceFolder: '$(Build.ArtifactStagingDirectory)/$(vs_folder_name)'
        contents: '**'
        flattenFolders: true

    - task: Bash@3
      name: PackAndPublishNugetPackage
      displayName: Pack and Push Nuget Package
      env:
        LICENSE_FILE_PATH: $(Build.ArtifactStagingDirectory)/License.txt
        NUGET_KEY: $(NUGET_KEY)
        NUGET_PACKAGE_CONFIG_FILE_PATH: $(Build.ArtifactStagingDirectory)/NugetConfigFile.txt
        NUGET_PACKAGE_VERSION: $(repo_version)
      inputs:
        targetType: 'inline'
        script: |
          apiKey=$NUGET_KEY
          configFilePath=$NUGET_PACKAGE_CONFIG_FILE_PATH
          customLicensePath=$LICENSE_FILE_PATH
          inputFolderPath="$(BUILD_STAGINGDIRECTORY)/Nuget/package_contents"
          outputLogPath="${BUILD_STAGINGDIRECTORY}/Nuget/NugetPackagingLog.txt"
          packageVersion=$NUGET_PACKAGE_VERSION
          python3 $(Build.SourcesDirectory)/Platforms/QemuQ35Pkg/.azurepipelines/nuget_publishing_with_repo_support.py --Operation PackAndPush --OutputLog "$outputLogPath" --ConfigFilePath "$configFilePath" --InputFolderPath "$inputFolderPath" --Version "$packageVersion" --ApiKey "$apiKey" --CustomLicensePath "$customLicensePath"
